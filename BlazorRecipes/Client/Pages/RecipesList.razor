@page "/recipes"
@using BlazorRecipes.Shared.Recipes
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorRecipes.Client.Services
@inject IRecipeService RecipeService

<PageTitle>Recipes</PageTitle>

@if (recipes == null)
{
    <Spinner />
}
else
{
    if (!HideToolbar)
    {
        <AuthorizeView>
            <Authorized>
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">Recipes</h1>
                    <div class="btn-toolbar mb-2 mb-md-0">
                        <div class="btn-group me-2">
                            <a href="recipes/add" class="btn btn-success">
                                <span class="oi oi-plus" aria-hidden="true"></span> Add Recipe
                            </a>
                        </div>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
    }

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 row-cols-xxl-6 g-4">
        @foreach (var recipe in recipes)
        {
            <div class="col">
                <RecipeCard Recipe="@recipe" />
            </div>
        }
    </div>
}

@code {
    private Recipe[]? recipes;

    [Parameter]
    public int? Count { get; set; }

    [Parameter]
    public bool HideToolbar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allRecipes = await RecipeService.GetAllRecipesAsync();

            recipes = GetFilteredRecipes(allRecipes).ToArray();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private IEnumerable<Recipe> GetFilteredRecipes(IEnumerable<Recipe> originalRecipes)
    {
        List<Recipe> filteredRecipes;

        if (Count != null)
        {
            filteredRecipes = originalRecipes.Take((int)Count).ToList();
        }
        else
        {
            filteredRecipes = originalRecipes.ToList();
        }

        return filteredRecipes;
    }
}
