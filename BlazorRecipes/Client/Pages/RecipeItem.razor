@page "/recipes/{Id:int}"
@using BlazorRecipes.Shared.Recipes
@using BlazorRecipes.Client.Services
@using Microsoft.AspNetCore.Authorization
@inject IRecipeService RecipeService

@if (Recipe == null)
{
    <Spinner />
}
else
{
    if (!HideToolbar)
    {
        <AuthorizeView>
            <Authorized>
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">Recipes</h1>
                    <div class="btn-toolbar mb-2 mb-md-0">
                        <div class="btn-group me-2">
                            <a href="recipes/edit/@Recipe.Id" class="btn btn-primary">
                                <span class="oi oi-pencil" aria-hidden="true"></span> Edit Recipe
                            </a>
                        </div>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
    }

    <div class="row">
        <div class="col-3">
            <img src="@Recipe.Image" class="img-fluid" alt="@Recipe.Title" />
        </div>
        <div class="col-9">
            <h1>@Recipe.Title</h1>

            <p>@Recipe.Description</p>

            <hr />

            <h2 class="h4">Ingredients</h2>
            
            <ul>
                @if (Recipe.Ingredients != null)
                {
                    foreach (var ingredient in Recipe.Ingredients)
                    {
                        <li>@ingredient.Text</li>
                    }
                }
            </ul>

            <hr />

            <h2 class="h4">Instructions</h2>

            <ol>
                @if (Recipe.Instructions != null)
                {
                    foreach (var instruction in Recipe.Instructions)
                    {
                        <li>@instruction.Text</li>
                    }
                }
            </ol>
        </div>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    [Parameter]
    public Recipe? Recipe { get; set; }

    [Parameter]
    public EventCallback<Recipe> RecipeChanged { get; set; }

    [Parameter]
    public bool HideToolbar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Recipe != null)
        {
            Id = Recipe.Id;
        }
        else
        {
            if (Id != null)
            {
                var id = (int)Id;
                Recipe = await RecipeService.GetRecipeById(id);
            }
        }

        await RecipeChanged.InvokeAsync(Recipe);
    }

}
